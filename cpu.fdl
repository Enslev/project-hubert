dp PC(
	in jumpto : ns(10);
	in select : ns(2);
	out cout 	: ns(32)
	){
	reg c : ns(10);
	always{

		c = (select == 1) ? c + 1: 
				(select == 2) ? jumpto: c;

		cout = c;

	}
}

dp add(
	in x, y : tc(32);
	out o : tc(32)
	) { 
	always {
		o = x + y;
	}
}

dp sub(
	in x, y : tc(32);
	out o : tc(32)
	) { 
	always {
		o = x - y;
	}
}

dp alu(
	in A, B : tc(32);
	in S : ns(1);
	out R : tc(32);
	out Z : ns(1);
	out N : ns(1)

) {
	sig Radd, Rsub : tc(32);
	use add(A,B,Radd);
	use sub(A,B,Rsub);

	always {
		R = (S == 0)	? Radd : Rsub ;

		N = (R < 0) ? 1 : 0;
		Z = (R == 0) ? 1 : 0;
	}


}

dp muxalu(
	in S : ns(1);
	in A, B : tc(32);
	out R : tc(32)
) { 
	always {
		R = (S == 0) ? A : B;
	}
}

dp muxreg(
	in S : ns(2);
	in A, B, C : tc(32);
	out R : tc(32)
) { 
	always {
		R = (S == 0) ? A :
				(S == 1) ? B : C ;
	}
}

dp register(
	in asel, bsel : ns(3);
	in storeenable : ns(1);
	in storesel : ns(3);
	in storedata : tc(32);
	out a, b: tc(32)
) {
	reg r0, r1, r2, r3, r4, r5, r6, r7 : tc(32);
	always {
		r1 = (storeenable == 1 & storesel == 1) ? storedata : r1;
		r2 = (storeenable == 1 & storesel == 2) ? storedata : r2;
		r3 = (storeenable == 1 & storesel == 3) ? storedata : r3;
		r4 = (storeenable == 1 & storesel == 4) ? storedata : r4;
		r5 = (storeenable == 1 & storesel == 5) ? storedata : r5;
		r6 = (storeenable == 1 & storesel == 6) ? storedata : r6;
		r7 = (storeenable == 1 & storesel == 7) ? storedata : r7; 

		a = (asel == 0) ? r0:
			(asel == 1) ? r1:
			(asel == 2) ? r2:
			(asel == 3) ? r3:
			(asel == 4) ? r4:
			(asel == 5) ? r5:
			(asel == 6) ? r6: r7;

		b = (bsel == 0) ? r0:
			(bsel == 1) ? r1:
			(bsel == 2) ? r2:
			(bsel == 3) ? r3:
			(bsel == 4) ? r4:
			(bsel == 5) ? r5:
			(bsel == 6) ? r6: r7;
	}
}

dp testReg(
	in a, b : tc(32);
	in pc : ns(32);
	in zero, neg : ns(1);
	out asel, bsel : ns(5);
	out storeenable : ns(1);
	out storesel : ns(3);
	out storedata : tc(32);
	out muxregsel : ns(2);
	out pcjump : ns(32);
	out pcselect : ns(2);
	out operand : tc(32);
	out alusel : ns(1);
	out muxalusel : ns(1)
 ) {
 	reg regzero, regneg : ns(1);
	always{
		$display($dec, "Cycle:", $cycle, ", PC=", pc, ", Aout=", a, ", Bout=", b, ", asel=", asel, ", bsel=", bsel);
		$display($dec, "storeenable=", storeenable, ", storesel=", storesel, ", storedata=", storedata);

		$display($dec, "");
		regzero = zero;
		regneg = neg;
	}

	sfg test_0 { asel=0; bsel=0; storeenable=0; storesel=0; storedata=0; muxregsel = 0; pcjump = 0; pcselect = 0; operand = 0; alusel = 0; muxalusel = 0;}
	sfg test_1 { asel=0; bsel=0; storeenable=0; storesel=0; storedata=0; muxregsel = 0; pcjump = 17; pcselect = regzero*2; operand = 0; alusel = 0; muxalusel = 0;}
	sfg test_2 { asel=0; bsel=0; storeenable=0; storesel=0; storedata=0; muxregsel = 0; pcjump = 0; pcselect = 0; operand = 0; alusel = 0; muxalusel = 0;}
	sfg test_3 { asel=0; bsel=0; storeenable=0; storesel=0; storedata=0; muxregsel = 0; pcjump = 0; pcselect = 0; operand = 0; alusel = 0; muxalusel = 0;}


	/*
	sfg test_0 { asel=0; bsel=0; storeenable=1; storesel=1; storedata=0; muxregsel = 2; pcjump = 0; pcselect = 0; operand = 17; alusel = 0; muxalusel = 0;}
	sfg test_1 { asel=1; bsel=0; storeenable=1; storesel=2; storedata=0; muxregsel = 1; pcjump = 0; pcselect = 0; operand = 0; alusel = 0; muxalusel = 0;}
	sfg test_2 { asel=1; bsel=2; storeenable=1; storesel=3; storedata=0; muxregsel = 2; pcjump = 0; pcselect = 0; operand = 0; alusel = 0; muxalusel = 1;}
	sfg test_3 { asel=1; bsel=3; storeenable=0; storesel=0; storedata=0; muxregsel = 0; pcjump = 0; pcselect = 0; operand = 0; alusel = 0; muxalusel = 0;}
	*/

	/*
	sfg test_0 { asel=3; bsel=6; storeenable=1; storesel=1; storedata=6; muxregsel = 0; pcjump = 15; pcselect = 0; operand = 0; alusel = 0; muxalusel = 0;}
	sfg test_1 { asel=1; bsel=6; storeenable=1; storesel=2; storedata=3; muxregsel = 1; pcjump = 18; pcselect = 1; operand = 0; alusel = 0; muxalusel = 0;}
	sfg test_2 { asel=1; bsel=2; storeenable=0; storesel=3; storedata=17; muxregsel = 0; pcjump = 0; pcselect = 0; operand = 0; alusel = 0; muxalusel = 0;}
	*/
}


fsm f_testbench(testReg) {
	initial s0;
	state s1, s2, s3;
	/*
	@s0 (test_0) -> s1;
	@s1 (test_1) -> s2;
	@s2 (test_2) -> s3;
	@s3 (test_3) -> s0;
	*/

	@s0 (test_0) -> s1;
	@s1 (test_1) -> s2;
	@s2 (test_2) -> s3;
	@s3 (test_3) -> s0;

}

dp disp(
	in a : tc(32)
) {
	always {
		$display($dec, "DISP ", a);
	}
}

system myFirstSystem {
	
	register(asel, bsel, storeenable, storesel, muxregout, a, b);
	muxreg(muxregsel, storedata, a, aluout, muxregout);
	muxalu(muxalusel, operand, b, muxaluout);
	alu(a, muxaluout, alusel, aluout, zero, neg);
	testReg(a, b, pc, zero, neg, asel, bsel, storeenable, storesel, storedata, muxregsel, pcjump, pcselect, operand, alusel, muxalusel);
	PC(pcjump, pcselect, pc);
	//disp(muxregout);

}