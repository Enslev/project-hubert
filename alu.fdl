dp adder(
	in x, y : tc(32);
	out o : tc(32)
	) { 
	always {
		o = x + y;
	}
}

dp alu(
	in A, B : tc(32);
	in S : ns(2);
	out R : tc(32);
	out N : ns(1);
	out Z : ns(1)

) {

	always {
		R = (S == 0)	? A + B :
				(S == 1)	? B - A :
				(S == 2)	? A * B :
										A / B	;

		N = (R < 0) ? 1 : 0;
		Z = (R == 0) ? 1 : 0;
	}


}

dp testAlu(
	in R : tc(32);
	in N, Z : ns(1);
	out A, B : tc(32);
	out S : ns(2)
 ) {
	always{
		$display($dec, "Cycle:", $cycle, ", A=", A , ", B=", B , ", R=", R, ", S=", S , ", N=", N , ", Z=", Z );
	}
	sfg test_0 { A=3; B=6; S=0;}
	sfg test_1 { A=23; B=17; S=0;}
	sfg test_2 { A=12; B=0; S=2;}
	sfg test_3 { A=12; B=0; S=3;}
}

fsm f_testbench(testAlu) {
	initial s0;
	state s1, s2, s3;
	@s0 (test_0) -> s1;
	@s1 (test_1) -> s2;
	@s2 (test_2) -> s3;
	@s3 (test_3) -> s0;
}

system myFirstSystem {
	alu(A, B, S, R, N, Z);
	testAlu(R, N, Z, A, B, S);
}